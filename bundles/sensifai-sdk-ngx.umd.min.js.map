{"version":3,"sources":["ng://sensifai-sdk-ngx/lib/sensifai-sdk-ngx.service.ts","ng://sensifai-sdk-ngx/lib/sensifai-sdk-ngx.module.ts"],"names":["SensifaiSdkNgxService","httpClient","this","MainHost","prototype","getResultByTaskID","TaskID","onSuccess","onError","payload","query","variables","taskId","post","subscribe","res","err","uploadByUrls","fileUrls","ApplicationToken","urls","token","uploadByFiles","fileInputValue","filesLength","target","files","length","formData","FormData","filesMap","operationName","Array","fill","i","len","tempObj","toString","Object","assign","append","JSON","stringify","file","Injectable","args","providedIn","HttpClient","SensifaiSdkNgxModule","NgModule","imports","declarations","exports"],"mappings":"wVAAA,IAAAA,EAAA,WAUE,SAAAA,EAAqBC,GAAAC,KAAAD,WAAAA,EAFbC,KAAAC,SAAW,uCAUnBH,EAAAI,UAAAC,kBAAA,SAAmBC,EAAgBC,EAAWC,OACtCC,EAAU,CACdC,MAAS,kkBACTC,UAAa,CAACC,OAAUN,IAE1BJ,KAAKD,WAAWY,KAAMX,KAAKC,SAAUM,GAAUK,UAAW,SAAUC,GAClER,EAAWQ,IACV,SAAUC,GACXR,EAASQ,MAWbhB,EAAAI,UAAAa,aAAA,SAAcC,EAAyBC,EAA0BZ,EAAWC,OACpEC,EAAU,CACdC,MAAS,2IACTC,UAAa,CACXS,KAAQF,EACRG,MAASF,IAIbjB,KAAKD,WAAWY,KAAMX,KAAKC,SAAUM,GAAUK,UAAW,SAAUC,GAClER,EAAWQ,IACV,SAAUC,GACXR,EAASQ,MAWbhB,EAAAI,UAAAkB,cAAA,SAAeC,EAAgBJ,EAA0BZ,EAAWC,GAiBlE,QAhBMgB,EAAcD,EAAeE,OAAOC,MAAMC,OAC1CC,EAAW,IAAIC,SAGfC,EAAW,GAEXrB,EAAU,CACdsB,cAAiB,KACjBrB,MAAiB,8IACjBC,UAAiB,CACfe,MALcM,MAAOR,GAAcS,KAAK,MAMxCZ,MAASF,IAKHe,EAAI,EAAGC,EAAMX,EAAaU,EAAIC,EAAKD,IAAK,KAC1CE,EAAU,GAChBA,EAAQF,GAAM,CAAC,mBAAqBA,EAAEG,YACtCC,OAAOC,OAAQT,EAAUM,GAI3BR,EAASY,OAAQ,aAAcC,KAAKC,UAAWjC,IAC/CmB,EAASY,OAAQ,MAAOC,KAAKC,UAAWZ,IAGlC,IAAIa,EAAO,EAAjB,IAAoBR,EAAMX,EAAamB,EAAOR,EAAKQ,IACjDf,EAASY,OAAQG,EAAKN,WAAad,EAAeE,OAAOC,MAAMiB,IAGjEzC,KAAKD,WAAWY,KAAMX,KAAKC,SAAUyB,GAAWd,UAAW,SAAUC,GACnER,EAAWQ,IACV,SAAUC,GACXR,EAASQ,0BA5Fd4B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAHLC,EAAAA,2IADT,GCAAC,EAAA,WAEA,SAAAA,KAMmC,2BANlCC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,QAAS,GAETC,aAAc,GACdC,QAAS,OAEwBJ,EARnC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SensifaiSdkNgxService {\n\n  private MainHost = 'https://api.sensifai.com/api/';\n\n  constructor( private httpClient: HttpClient ) {}\n\n  /**\n   * Retrieve Result By Task ID\n   * @param TaskID: Your Process Task ID\n   * @param onSuccess: Success CallBack Function\n   * @param onError: Error CallBack Function\n   */\n  getResultByTaskID( TaskID: string, onSuccess, onError ) {\n    const payload = {\n      'query': 'query( $taskId: String! ){apiResult( taskId: $taskId){ ...on ImageResult{isDone errors imageResults{nsfwResult{type probability value}logoResult{description}landmarkResult{description}taggingResult{label probability}faceResult{detectedBoxesPercentage probability detectedFace label}}} ... on VideoResult{fps duration isDone framesCount errors videoResults{startSecond endSecond startFrame endFrame thumbnailPath taggingResult{label probability}actionResult{label probability}celebrityResult{name frequency} sportResult{label probability}nsfwResult{probability type value}}}}}',\n      'variables': {'taskId': TaskID }\n    };\n    this.httpClient.post( this.MainHost, payload ).subscribe( function (res) {\n      onSuccess( res );\n    }, function (err) {\n      onError( err );\n    });\n  }\n\n  /**\n   * Start Process By URL\n   * @param fileUrls: List Of URL's\n   * @param ApplicationToken: Application Token\n   * @param onSuccess: Success CallBack Function\n   * @param onError: Error CallBack Function\n   */\n  uploadByUrls( fileUrls: Array<string>, ApplicationToken: string, onSuccess, onError ) {\n    const payload = {\n      'query': 'mutation( $token: String!, $urls: [String!]! ){uploadByUrl( token: $token, urls: $urls){result error succeed{file taskId} cannotUpload}}',\n      'variables': {\n        'urls': fileUrls,\n        'token': ApplicationToken\n      }\n    };\n\n    this.httpClient.post( this.MainHost, payload ).subscribe( function (res) {\n      onSuccess( res );\n    }, function (err) {\n      onError( err );\n    });\n  }\n\n  /**\n   * Start Process By Files\n   * @param fileInputValue: List Of Files\n   * @param ApplicationToken: Application Token\n   * @param onSuccess: Success CallBack Function\n   * @param onError: Error CallBack Function\n   */\n  uploadByFiles( fileInputValue, ApplicationToken: string, onSuccess, onError ) {\n    const filesLength = fileInputValue.target.files.length;\n    const formData = new FormData();\n\n    /** Create Base Object Query Variable **/\n    const filesMap = {};\n    const nullFiles = Array( filesLength ).fill(null);\n    const payload = {\n      'operationName': null,\n      'query'        : 'mutation( $token: String!, $files: [Upload!]! ){uploadByFile(token: $token, files: $files){result error succeed{file taskId} cannotUpload}}',\n      'variables'    : {\n        'files': nullFiles,\n        'token': ApplicationToken\n      }\n    };\n\n    /** Map Object Generator Loop **/\n    for ( let i = 0, len = filesLength; i < len; i++) {\n      const tempObj = {};\n      tempObj[i]  = ['variables.files.' + i.toString()];\n      Object.assign( filesMap, tempObj);\n    }\n\n    /** Append Operation and Map to FormData Query **/\n    formData.append( 'operations', JSON.stringify( payload) );\n    formData.append( 'map', JSON.stringify( filesMap ) );\n\n    /** Append Files To FormData  **/\n    for ( let file = 0, len = filesLength; file < len; file++) {\n      formData.append( file.toString() , fileInputValue.target.files[file] );\n    }\n\n    this.httpClient.post( this.MainHost, formData ).subscribe( function (res) {\n      onSuccess( res );\n    }, function (err) {\n      onError( err );\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [],\n  exports: []\n})\nexport class SensifaiSdkNgxModule {}\n"]}